{"version":3,"sources":["Components/GameHeader.js","Components/GameIntro.js","Components/GameButton.js","Components/ButtonBoard.js","Components/MessageDisplay.js","Components/ShowLevel.js","Components/StateDependentButton.js","Components/MemoryGame.js","Components/App.js","serviceWorker.js","index.js"],"names":["GameHeader","react_default","a","createElement","className","GameIntro","props","gameState","Fragment","GameButton","color","activeNumber","number","map","onClick","style","background","concat","buttonColors","ButtonBoard","buttonClick","_useState","useState","_useState2","Object","slicedToArray","setActiveNumber","_useState3","sequenceAhead","next","_useState4","buttonSequence","setButtonSequence","_useState5","_useState6","userSequence","setUserSequence","_useState7","_useState8","correctSequence","setCorrectSequence","generateNumber","Math","floor","random","generateButtonSequence","sequenceSize","numberSequence","lastNumber","index","randomNumber","push","generateNumberSequence","gameLevel","_ref","toConsumableArray","slice","userIsWrong","length","useEffect","setGameState","timeoutId","setTimeout","shift","sequenceNextButton","clearTimeout","buttons","Components_GameButton","key","MessageDisplay","ShowLevel","StateDependentButton","actualState","dependsOn","text","MemoryGame","_useGameState","setGameLevel","updateBackgroundColor","document","body","backgroundColor","newGameState","useGameState","Components_GameHeader","Components_GameIntro","Components_ButtonBoard","Components_MessageDisplay","Components_ShowLevel","Components_StateDependentButton","App","Components_MemoryGame","Boolean","window","location","hostname","match","ReactDOM","render","Components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2999139.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst GameHeader = () => {\r\n    return (\r\n        <h1 className=\"game-header\">\r\n              Memory test\r\n        </h1>\r\n    );\r\n}\r\n\r\nexport default GameHeader;","import React from 'react';\r\n\r\nconst GameIntro = (props) => {\r\n    if (props.gameState==='start') {\r\n        return (\r\n        <>\r\n            <p className={'game-intro-header'}>\r\n                How to play:\r\n            </p>\r\n            <p className={'game-intro'}>\r\n                A sequence of buttons will flash. \r\n                You should memorize and repeat it right after.\r\n                The higher the level you reach, the longer is the sequence.\r\n                See how far you can get.\r\n            </p>\r\n        </>\r\n        );\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport default GameIntro;","import React from 'react';\r\n\r\nconst GameButton = (props) => {\r\n    let color = props.color;\r\n\r\n    const dimColor = () => {\r\n        return color.map((color) => color*0.5);\r\n    }\r\n\r\n    color = props.activeNumber!==props.number ? dimColor() : color;\r\n\r\n    return (\r\n        <div \r\n            className=\"game-button\" \r\n            onClick={() => props.onClick(props.number)}\r\n            style={{background: `rgb(${color[0]},${color[1]},${color[2]})`}}\r\n        />\r\n    );\r\n}\r\n\r\nexport default GameButton;","import React,{ useState, useEffect } from 'react';\r\nimport GameButton from './GameButton';\r\n\r\nconst buttonColors = [\r\n    [0x7F,0xDB,0xFF],\r\n    [0xFF,0xDC,0x00],\r\n    [0x01,0xFF,0x70],\r\n    [0xF0,0x12,0xBE],\r\n    [0x39,0xCC,0xCC],\r\n    [0xB1,0x0D,0xC9],\r\n    [0xFF,0x85,0x1B],\r\n    [0x00,0x74,0xD9],\r\n    [0xFF,0x41,0x36]\r\n];\r\n\r\nconst ButtonBoard = (props) => {\r\n\r\n    const [activeNumber, setActiveNumber] = useState(0);\r\n    const [buttonSequence, setButtonSequence] = useState({sequenceAhead: [], next: -1});\r\n    const [userSequence, setUserSequence] = useState([]);\r\n    const [correctSequence, setCorrectSequence] = useState([]);\r\n\r\n    const generateNumber = () => {\r\n        return (1+Math.floor(Math.random()*9));\r\n    }\r\n\r\n    const generateNumberSequence = (sequenceSize) => {\r\n        let numberSequence = [];\r\n        let lastNumber=null;\r\n        for (let index=0; index<sequenceSize; index++) {\r\n            let randomNumber=generateNumber();\r\n            while (randomNumber===lastNumber) randomNumber=generateNumber();\r\n            lastNumber=randomNumber;\r\n            numberSequence.push(randomNumber);\r\n        }\r\n        return numberSequence;\r\n    }\r\n\r\n    // This is the last function to finish the web app\r\n    const generateButtonSequence = () => {\r\n        let buttonSequence = generateNumberSequence(1+props.gameLevel);\r\n        let [next,...sequenceAhead] = [...buttonSequence];\r\n        sequenceAhead.push(0);\r\n        sequenceAhead.push(null);\r\n\r\n        setCorrectSequence(buttonSequence);\r\n        return {sequenceAhead, next};\r\n    };\r\n\r\n    const userIsWrong = () => {\r\n        if (userSequence.length===0) return false;\r\n        for (let index=0; index<userSequence.length; index++) {\r\n            if (userSequence[index]!==correctSequence[index]) return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const userIsDoneAndRight = () => {\r\n        if (!userIsWrong) return false;\r\n        if (userSequence.length===correctSequence.length) return true;\r\n    }\r\n\r\n    const sequenceNextButton = () => {\r\n        let sequenceAhead = buttonSequence.sequenceAhead;\r\n        let next = sequenceAhead.shift();\r\n        setActiveNumber(buttonSequence.next);\r\n        setButtonSequence({sequenceAhead, next});\r\n    }\r\n\r\n    // Determines what happens when the component is rendered\r\n    useEffect(() => {\r\n        if (props.gameState==='replicate' && userIsWrong()) {\r\n            props.setGameState('end');\r\n            setButtonSequence({sequenceAhead: [], next: -1});\r\n            return;\r\n        }\r\n        if (props.gameState==='replicate' && userIsDoneAndRight()) {\r\n            props.setGameState('congrats');\r\n            setButtonSequence({sequenceAhead: [], next: -1});\r\n            return;\r\n        }\r\n        if (props.gameState==='observe' && buttonSequence.next!==-1 && buttonSequence.next!==null) {\r\n            const timeoutId = setTimeout(() => sequenceNextButton(),1000);\r\n            return () => clearTimeout(timeoutId);\r\n        }\r\n        if (props.gameState==='observe' && buttonSequence.next===null) {\r\n            props.setGameState('replicate');\r\n            setButtonSequence({sequenceAhead: [], next: -1});\r\n            setActiveNumber(0);\r\n            return;\r\n        }\r\n        if (props.gameState==='observe' && buttonSequence.next===-1) {\r\n            setButtonSequence(generateButtonSequence());\r\n            setUserSequence([]);\r\n            setActiveNumber(0);\r\n            return;\r\n        }\r\n    });\r\n\r\n    // Determines what happens when you click the buttons\r\n    let buttonClick;\r\n    if (props.gameState==='replicate') {\r\n        buttonClick = (number) => {\r\n            if (userSequence[userSequence.length-1]!==number) {\r\n                setActiveNumber(number);\r\n                setUserSequence(userSequence.concat(number));\r\n            }\r\n        };\r\n    }\r\n    else {\r\n        buttonClick = (number) => null;\r\n    }\r\n\r\n    // Lay the buttons on the board\r\n    let buttons = [];\r\n    for (let number=0; number<9; number++) {\r\n        buttons.push(\r\n            <GameButton \r\n                key={number}\r\n                color={buttonColors[number]} \r\n                activeNumber={activeNumber} \r\n                number={number+1} onClick={buttonClick}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"button-board\">\r\n            {buttons}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ButtonBoard;","import React from 'react';\r\n\r\nconst MessageDisplay = (props) => {\r\n\r\n    switch(props.gameState) {\r\n        case 'observe':\r\n            return (\r\n                <p className='game-message'>\r\n                    Observe\r\n                </p>\r\n            );\r\n        case 'replicate':\r\n            return (\r\n                <p className='game-message'>\r\n                    Replicate\r\n                </p>\r\n            );\r\n        case 'congrats':\r\n            return (\r\n                <p className='game-message'>\r\n                    Well done!\r\n                </p>\r\n            );\r\n        case 'end':\r\n            return (\r\n                <p className='game-message'>\r\n                    Wrong sequence\r\n                </p>\r\n            );\r\n        default:\r\n            return '';\r\n    }\r\n}\r\n\r\nexport default MessageDisplay;","import React from 'react';\r\n\r\nconst ShowLevel = (props) => {\r\n    switch(props.gameState) {\r\n        case 'observe':\r\n            return (\r\n                <p>\r\n                    {`Level ${props.gameLevel}`}\r\n                </p>\r\n            );\r\n        case 'replicate':\r\n            return (\r\n                <p>\r\n                    {`Level ${props.gameLevel}`}\r\n                </p>\r\n            );\r\n        case 'end':\r\n            return (\r\n                <p>\r\n                    {`You've reached level ${props.gameLevel}`}\r\n                </p>\r\n            );\r\n        case 'congrats':\r\n            return (\r\n                <p>\r\n                    {`You've passed level ${props.gameLevel}`}\r\n                </p>\r\n            );\r\n        default:\r\n            return '';\r\n    }\r\n};\r\n\r\nexport default ShowLevel;","import React from 'react';\r\n\r\nconst StateDependentButton = (props) => {\r\n    if (props.actualState===props.dependsOn) {\r\n        return (\r\n            <div \r\n                className=\"state-button\"\r\n                onClick={props.onClick}\r\n            >{props.text}\r\n            </div>\r\n        );\r\n    }\r\n    return '';\r\n}\r\n\r\nexport default StateDependentButton;","import React, { useState } from 'react';\r\nimport GameHeader from './GameHeader';\r\nimport GameIntro from './GameIntro';\r\nimport ButtonBoard from './ButtonBoard';\r\nimport MessageDisplay from './MessageDisplay';\r\nimport ShowLevel from './ShowLevel';\r\nimport StateDependentButton from './StateDependentButton';\r\n\r\n\r\n/* The game could be in any of the states below:\r\n * 'start' : The first state, where a button is shown to start the game\r\n * 'observe' : A temporary state where the random generate sequence is being demonstrated\r\n * 'replicate' : A state where the user will input the sequence just observed\r\n * 'congrats' : Congratulate the user for matching the sequence. Wait for the 'Next' button press\r\n * 'end' : The user got the sequence wrong. The game ends displaying the level the user reached\r\n**/\r\n\r\n\r\nconst useGameState = () => {\r\n    const [gameState, setGameState] = useState('start');\r\n    const [gameLevel, setGameLevel] = useState(1);\r\n    const [buttonSequence, setButtonSequence] = useState([]);\r\n\r\n    const updateBackgroundColor = (gameState) => {\r\n        let color;\r\n        switch(gameState) {\r\n            case 'start':\r\n                color = \"#0074D9\"; //BLUE\r\n                break;\r\n            case 'observe':\r\n                color = \"#FF851B\"; //ORANGE\r\n                break;\r\n            case 'replicate':\r\n                color = \"#39CCCC\"; //TEAL\r\n                break;\r\n            case 'congrats':\r\n                color = \"#2ECC40\"; //GREEN\r\n                break;\r\n            case 'end':\r\n                color = \"#FF4136\"; //RED\r\n                break;\r\n            default:\r\n                color = \"#FFFFFF\"; //WHITE\r\n        }\r\n        document.body.style.backgroundColor = color;\r\n    }\r\n\r\n    const updateGameState = (newGameState) => {\r\n        updateBackgroundColor(newGameState);\r\n        setGameState(newGameState);\r\n    }\r\n\r\n    updateBackgroundColor(gameState);\r\n\r\n    return {\r\n        buttonSequence,\r\n        setButtonSequence,\r\n        gameLevel,\r\n        setGameLevel,\r\n        gameState,\r\n        setGameState: updateGameState\r\n    };\r\n};\r\n\r\nconst MemoryGame = () => {\r\n\r\n    const {\r\n        gameLevel,\r\n        setGameLevel,\r\n        gameState,\r\n        setGameState\r\n    } = useGameState();\r\n\r\n    const onStartButtonPress = () => {\r\n        setGameState('observe');\r\n    }\r\n\r\n    const onTryAgainButtonPress = () => {\r\n        setGameLevel(1);\r\n        setGameState('observe');\r\n    }\r\n\r\n    const onNextButtonPress = () => {\r\n        setGameLevel(gameLevel+1);\r\n        setGameState('observe');\r\n    }\r\n\r\n    // The button board will replicate the sequence if gameState==='observe'\r\n    return (\r\n        <div className=\"memory-game\">\r\n            <GameHeader />\r\n            <GameIntro gameState={gameState} />\r\n            <ButtonBoard\r\n                gameState={gameState}\r\n                setGameState={setGameState}\r\n                gameLevel={gameLevel}\r\n            />\r\n            <MessageDisplay gameState={gameState} />\r\n            <ShowLevel gameState={gameState} gameLevel={gameLevel} />\r\n            <br />\r\n            <br />\r\n            <StateDependentButton \r\n                actualState={gameState}\r\n                dependsOn='start'\r\n                onClick={onStartButtonPress}\r\n                text='start'\r\n            />\r\n            <StateDependentButton \r\n                actualState={gameState}\r\n                dependsOn='congrats'\r\n                onClick={onNextButtonPress}\r\n                text='next'\r\n            />\r\n            <StateDependentButton \r\n                actualState={gameState}\r\n                dependsOn='end'\r\n                onClick={onTryAgainButtonPress}\r\n                text='try again'\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MemoryGame;","import React from 'react';\nimport MemoryGame from './MemoryGame';\n\nfunction App() {\n  return (\n    <MemoryGame />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}